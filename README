
# WHAT IS ATLAS?

ATLAS is a single-binary code that performs the tile tracking, power spectrum making, and multi-ridge fitting necessary to do high-resolution ring-diagram analysis. The tracking portion of the code originates from mtrack, which is used in the HMI ring-diagram pipeline. I wrote a newer, parallelized version of mtrack and called it FRACK (FORTRAN Tracking). The power spectrum portion is from an old code named pspec3 (I think). I wrote a newer, parallelized version of pspec3 and called it PSPEC (also in FORTRAN). The final component of ATLAS is the Multi-Ridge Fitting (MRF) code, which is presented in Greer et al. 2014 (Sol. Phys.). The MRF code is written in C.

All three of these codes (FRACK, PSPEC, MRF) can be strung together with scripts and automated to the point of creating something that mimics the HMI pipeline. This works just fine until you want to do high-resolution analysis. To see why, consider the inputs and outputs of each code for a standard single-day 16-degree tile set:

FRACK INPUT: full-disk Dopplergrams (64 GB)
FRACK OUTPUT / PSPEC INPUT: tracked tiles (1.2 GB per tile)
PSPEC OUTPUT / MRF INPUT: unwrapped power spectra (50 MB per tile)
MRF OUTPUT: ring fits (7 KB per tile)

Standard dense-packing results in around 300 16-degree tiles for a single day. This means 360 GB of tracked tiles need to be saved to the disk and loaded by PSPEC. The power spectra use 15 GB on the disk and need to be read in by MRF. The ring fits are basically negligible at this point. While you may not want to keep the tiles and power spectra sitting around, they need to be written out to the disk at some point during the process. 

For high-resolution analysis, you can have over 10^5 tiles for a single day. A standard number is 130321. This means 157 TB(!) of tracked tiles, and 7 TB of power spectra. Even if you have the disk space for this, or stagger the whole process so you process things in batches, the speed at which you can process data is limited by disk i/o. To make this scale of processing possible, the ATLAS code was made. The idea is to save time by never writing the tracked tiles or power spectra to the disk, and instead combine all three steps of the process (FRACK, PSPEC, MRF) into a single binary that can run on large core counts (>1k).

FRACK and PSPEC are written in FORTRAN, while MRF is written in C. Instead of re-writing any of them in a different language, I found a way to compile them together as-is. Ideally, the FORTRAN components would be re-written in C, but I leave that as an exercise for the reader.

ATLAS Inputs:
- a set of full-disk Dopplergrams
- a 'background' Dopplergram
- command-line settings
- (optional) a grid file, specifying lon/lat coordinates
ATLAS Outputs:
- ring frequency shifts at each disk location, for each mode


# INSTRUCTIONS FOR COMPILING ATLAS

The ATLAS code depends on a few other pieces of software. Here's a list along with versions I have used and links to find them:
CFITSIO - 3.24 - http://heasarc.nasa.gov/fitsio/fitsio.html
FFTW - 3.2.1 - http://www.fftw.org/download.html
MKL - Unknown

You will likely need to modify the provided Makefile, as I often have it set to point to compilers and libraries in my home directory. I've tried to make it fairly easy to modify.

Sometimes FFTW is included in the MKL package on supercomputers, so you may not need to worry about it once you set up the Makefile appropriately. The exact versions of FFTW and MKL are not very important, but sometimes CFITSIO can have issues compiling with random compilers. I haven't had any luck determining why it has such problems, so just be ready.

The ATLAS code is a mix of FORTRAN and C code, for reasons explained above. To generate a single binary from all of the source files, the Makefile (use command 'make') is set to first compile the FORTRAN code into object files, then compile the C code into object files, then finally compile all object files into a single binary. This means that two compilers are needed. I've had luck using mpif90 (from OpenMPI 1.6.5) and icc to compile them. To understand the stages of compiling, check out the end part of the Makefile. Due to strange issues I don't understand, the FORTRAN compiler will choke up on the first step of compiling and throw a bunch of errors blaming the code. If you just type in 'make' again without changing anything, it will often continue ahead and everything will be fine. The binary is by default called 'atlas'. Doing a 'make clean' will delete the binary as well as all of the object files.


# INSTRUCTIONS FOR RUNNING ATLAS

## Simple Example
ATLAS uses command-line options to set what it will do when run. The set of command-line options needed to do something complex can get long, so it's good to make your own scripts that handle it. If you ever can't remember what options are available, run './atlas -h':
% ./atlas -h
Minimal Usage: ./atlas
	Other Options:
	-v      Verbose Mode
	-r [#]  Tracking rate (0=car, 1=snod, 2=custom)
	-ml [file]  Master list of dopplergrams
	-bk [file]  Background fits file
	-ts[32,16,8,4,2,1]  Do tilesize [#]
	-clon [#], -clat [#]  Central lon/lat
	-lonrn [#], -latrn [#]  Lon/lat ranges
	-memlimit [#]  Total memory limit in GB
	-loaddops [#]  Number of dopplergrams to load at a time
	-time  Record timing info for performance analysis
	-outdir [dir]  Directory to save output in
	-mdi  Use MDI settings (dopplergram size, scale, etc)
	-pspec  Turn tracked tile into an unwrapped pspec
	-extend  Use extended header info from newer dopplergrams
	-grid [file]  File to read grid from
	-fitguess [file]  Guess table for fitting
	-fitout [file]  File to save fits to (binary)
	-maxtiles [#]  Number of tiles per MPI process to hold in memory at once

Unfortunately, some of these options are obsolete or perform duplicate tasks. I'll try to clean this up.

## Full-Scale Run
ATLAS is a fairly complicated piece of machinery, so running it on a large scale can be tricky.

# INSTRUCTIONS FOR MODIFYING ATLAS

The entry-point for the whole code is in Main.F90
